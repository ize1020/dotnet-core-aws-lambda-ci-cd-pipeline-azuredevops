trigger: none

pool:
  name: gs-spring-boot
    
stages:
- stage: Build
  jobs:
  - job:

    steps:
    - script: dotnet build --configuration Release
      displayName: 'dotnet build Release'

    - task: DotNetCoreCLI@2
      displayName: Run unit tests
      inputs:
        command: 'test'
        projects: '**/*Tests*.csproj'
        testRunTitle: 'Unit Tests'

    - task: DotNetCoreCLI@2
      displayName: Publish to $(Build.ArtifactStagingDirectory)
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'src/**/*.csproj'
        arguments: '-c Release -o "$(Build.ArtifactStagingDirectory)"'
        
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  jobs: 
    - job:

      variables:
      - group: AWS-ARN

      steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(System.ArtifactsDirectory)'

#      - task: LambdaDeployFunction@1
#       displayName: 'Deploy Lambda Function'
#        inputs:
#          awsCredentials: 'hello-world-to-AWS'
#          regionName: 'eu-west-1'
#          deploymentMode: 'codeandconfiguration'
#          functionName: 'MyFunctionCreateFromAzureDevops'
#          description: 'From AzureDevops'
#          functionHandler: 'LambdaTest::LambdaTest.LambdaHandler::handleRequest'
#         runtime: 'dotnetcore2.1'
#         codeLocation: 'localfile'
#          localZipFile: '$(Build.ArtifactStagingDirectory)/drop/awsLambdaCICDPipeline.zip'
#         roleARN: '$(AWS-Lambda-ARN)'

      - task: LambdaNETCoreDeploy@1
        inputs:
          awsCredentials: 'hello-world-to-AWS'
          regionName: 'eu-west-1'
          command: 'deployFunction'
          PackageOnly: false
          lambdaProjectPath: 'src/awsLambdaCICDPipeline/awsLambdaCICDPipeline.csproj'
          functionName: 'MyFunctionCreateFromAzureDevops'
          functionRole: '$(Role_ARN_1)'
          functionHandler: 'LambdaTest::LambdaTest.LambdaHandler::handleRequest'
          functionMemory: 512
          functionTimeout: 30

  dependsOn:
  - Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
